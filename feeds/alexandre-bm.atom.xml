<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>rednaks' blog</title><link href="http://blog.rednaks.tn/" rel="alternate"></link><link href="http://blog.rednaks.tn/feeds/alexandre-bm.atom.xml" rel="self"></link><id>http://blog.rednaks.tn/</id><updated>2015-03-09T00:00:00+01:00</updated><entry><title>Firecam : use FirefoxOS devices as a webcam</title><link href="http://blog.rednaks.tn/firecam-use-firefoxos-devices-as-a-webcam.html" rel="alternate"></link><updated>2015-03-09T00:00:00+01:00</updated><author><name>Alexandre BM</name></author><id>tag:blog.rednaks.tn,2015-03-09:firecam-use-firefoxos-devices-as-a-webcam.html</id><summary type="html">&lt;p&gt;I was working on an opencv project and I have a very bad image quality on my
 laptop's webcam I was looking for an alternative and I remembered that project, &lt;a href="https://play.google.com/store/apps/details?id=com.dev47apps.droidcam"&gt;droidcam&lt;/a&gt;
 that allows you to use an Anroid device as a webcam.&lt;/p&gt;
&lt;p&gt;But what about firefoxOS ? after checking on the marketplace I couldn't find any 
  webapp that do the same work as droidcam, so I decided to start an experimental
  project, firecam, a FirefoxOS WebApp so stream video from firefoxOS.&lt;/p&gt;
&lt;p&gt;The project is splitted into two applications :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rednaks/firecam"&gt;firecam&lt;/a&gt; : WebApp installed on a FirefoxOS device.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rednaks/firecam"&gt;firecam_client&lt;/a&gt; : A linux client that connects to firecam and play the video stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Firecam :&lt;/h2&gt;
&lt;p&gt;Firecam is not yet in the &lt;a href="https://marketplace.firefox.com/"&gt;marketplace&lt;/a&gt;, it uses a privileged API (&lt;code&gt;TCPSocket&lt;/code&gt;) so it must be
 approved and signed by mozilla first.&lt;/p&gt;
&lt;p&gt;But in order for developers debug their applications,
 there is no restriction when you install the webapp using WebIDE, except internal APIs.&lt;/p&gt;
&lt;p&gt;I recommend using the latest version of &lt;a href="https://www.mozilla.org/en-US/firefox/developer/"&gt;Firefox Developer Edition&lt;/a&gt; that already contains WebIDE.&lt;/p&gt;
&lt;p&gt;First start by cloning the two repositories : &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone --depth&lt;span class="o"&gt;=&lt;/span&gt;1 https://github.com/rednaks/firecam

&lt;span class="c"&gt;# the client repo that we&amp;#39;ll use it later.&lt;/span&gt;
git clone --depth&lt;span class="o"&gt;=&lt;/span&gt;1 https://github.com/rednaks/firecam_client
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can find a great tutorial about how to use WebIDE and install applications on the Mozilla Developer Network website :
&lt;a href="https://developer.mozilla.org/en-US/docs/Tools/WebIDE"&gt;https://developer.mozilla.org/en-US/docs/Tools/WebIDE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After installing the App you will have something like this : &lt;/p&gt;
&lt;p&gt;&lt;img alt="Firecamm before starting server" src="http://i.imgur.com/sGfWmeG.png" /&gt;&lt;/p&gt;
&lt;p&gt;You can already start the streaming server, it will be listening for TCP connections on port 8080.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Firecamm after starting server" src="https://i.imgur.com/79LIrSR.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Firecam Client :&lt;/h2&gt;
&lt;p&gt;You must already cloned the repo of the client for linux.
Before running the client there are some dependencies to install :&lt;/p&gt;
&lt;p&gt;On debian based ditros : &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python-opencv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Makesure the streaming server is running on FirefoxOS and then
launch the client : &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;firecam_client
python firecam.py 192.168.1.8 &lt;span class="c"&gt;# this is your firefoxOS device IP address on LAN.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Firecam clien playing video stream" src="http://i.imgur.com/0jM0Mwx.png" /&gt;&lt;/p&gt;
&lt;h2&gt;What's next ?&lt;/h2&gt;
&lt;p&gt;The app is in an experimental stage, right now it's not performant,
I recorded between 2 and 5 frames per second, 2 fps when it's colorful 5 fps with less colors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Looking for smarter ways to increase performance, actually I'm using
UserMedia WebAPI, then printing the frames into a canvas and finally send it via
the &lt;code&gt;TCPSocket&lt;/code&gt; synchronously. (Probably exploring the WebRTC API).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I didn't focus on the UI and I'm not so good at that, It might take a while. (but any help is welcome :))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating a driver for linux following vide4linux specs in order to allow other
applications to use it, I already took a look the droidcam source code, and I found
it not very pretty and a little bit complicated, firecam is much more simple.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supporting other Platforms ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you liked it, if you have any suggestions, please open a new issue on &lt;a href="https://github.com/rednaks/firecam/issues"&gt;github&lt;/a&gt;.&lt;/p&gt;</summary><category term="firefoxOS"></category><category term="linux"></category><category term="javascript"></category><category term="python"></category></entry><entry><title>Using Ctrl-Tab to switch between tabs in gnome-terminal</title><link href="http://blog.rednaks.tn/using-ctrl-tab-to-switch-between-tabs-in-gnome-terminal.html" rel="alternate"></link><updated>2014-07-25T15:46:00+02:00</updated><author><name>Alexandre BM</name></author><id>tag:blog.rednaks.tn,2014-07-25:using-ctrl-tab-to-switch-between-tabs-in-gnome-terminal.html</id><summary type="html">&lt;p&gt;If you are like me using &lt;code&gt;Ctrl-Tab&lt;/code&gt; (resp &lt;code&gt;Ctrlt-Shift-Tab&lt;/code&gt;) to switch tabs in Firefox and you find that the default way to switch tabs is harmful, indeed, the default shortcuts are &lt;code&gt;Ctrl-PageUp&lt;/code&gt; (resp &lt;code&gt;Ctrl-PageDown&lt;/code&gt;). The two buttons are so far and you can’t really be fast in switching.&lt;/p&gt;
&lt;p&gt;The good news is that you can customize it in preferences edition, but the bad news is that the Tab button is not allowed.&lt;/p&gt;
&lt;p&gt;Gnome developers said that this is a reserved key by &lt;code&gt;GTK&lt;/code&gt;. and this could not be considered as a bug.&lt;/p&gt;
&lt;p&gt;Well I tried to force the values in the settings database and modified it manually using gsettings. and yes ! It works !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gsettings &lt;span class="nb"&gt;set  &lt;/span&gt;org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ next-tab &lt;span class="s1"&gt;&amp;#39;&amp;lt;Primary&amp;gt;Tab&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;gsettings &lt;span class="nb"&gt;set  &lt;/span&gt;org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ prev-tab &lt;span class="s1"&gt;&amp;#39;&amp;lt;Primary&amp;gt;&amp;lt;Shift&amp;gt;Tab&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I don’t know if gnome developers are aware of that because they keep ignoring binding Tab key.&lt;/p&gt;
&lt;p&gt;This was a little hack, that I wanted to share with you. If you don't want to bother yourself, there is a good alternative to gnome-terminal which is &lt;a href="https://code.google.com/p/jessies/wiki/Terminator"&gt;Terminator (Terminal Emulator)&lt;/a&gt; with some great additional features.&lt;/p&gt;</summary><category term="linux"></category><category term="gnome"></category><category term="gnome-terminal"></category><category term="shortcut"></category><category term="hack"></category><category term="terminator"></category></entry><entry><title>Tracking EME implementation on Firefox</title><link href="http://blog.rednaks.tn/tracking-eme-implementation-on-firefox.html" rel="alternate"></link><updated>2014-07-12T00:00:00+02:00</updated><author><name>Alexandre BM</name></author><id>tag:blog.rednaks.tn,2014-07-12:tracking-eme-implementation-on-firefox.html</id><summary type="html">&lt;p&gt;As you might know, Mozilla officially announced months ago that it will begin to implement the Encrypted Media Extension (EME) HTML5 specification for Firefox, that allows DRM content on video and audio. This wasn't an easy decision, since Mozilla is always trying to keep the web as open as possible.&lt;/p&gt;
&lt;p&gt;Unlike other browsers, Mozilla decided to not implement directly the component and opted for a third-party plugin implementation running within an opensource sandbox. (more details : https://hacks.mozilla.org/2014/05/reconciling-mozillas-mission-and-w3c-eme/ )&lt;/p&gt;
&lt;p&gt;So if you are worried about how mozilla is going to implement EME, There is A meta bug on &lt;a href="https://bugzilla.mozilla.org"&gt;bugzilla&lt;/a&gt; used to reference to all bugs related to the spec implementation that you can track.
(PS: for mozilla a bug can be anything, an issue, a new feature, a discussion ...)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1015800"&gt;[EME][META] Implement Encrypted Media Extensions &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You will find the referenced bugs in the "Depends on" section :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Meta bug" src="http://i.imgur.com/RqYQsef.png" /&gt;&lt;/p&gt;
&lt;p&gt;If you want to be notified about any bug updates you can create a bugzilla account, pick a bug on which you are interested in and add yourself to "CC List" and then save the changes&lt;/p&gt;
&lt;p&gt;&lt;img alt="Subscrive CC list" src="http://i.imgur.com/QhSGxfE.png" /&gt;&lt;/p&gt;</summary><category term="encrypted media extention"></category><category term="eme"></category><category term="drm"></category><category term="firefox"></category><category term="adobe"></category><category term="HTML5"></category><category term="mozilla"></category></entry><entry><title>Build using alternative libraries with GCC</title><link href="http://blog.rednaks.tn/build-using-alternative-libraries-with-gcc.html" rel="alternate"></link><updated>2013-12-27T00:00:00+01:00</updated><author><name>Alexandre BM</name></author><id>tag:blog.rednaks.tn,2013-12-27:build-using-alternative-libraries-with-gcc.html</id><summary type="html">&lt;p&gt;I’m a debian user, and I like the way it’s stable. For debian stable means really stable, but this has a cost, at the most of the time we don’t have the latest version of a package, which makes debian not really a suitable distribution for development.&lt;/p&gt;
&lt;p&gt;But this is not really important, we can always try to build programs from sources at this level we might have another issue. The latest version of the package may require a later version of a library.
Let’s take the example of &lt;code&gt;boost&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The program below uses signals from the &lt;code&gt;boost&lt;/code&gt; library. Signals are quite useful, every time a signal is emitted, it will be handled by the function to which it's connected to.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// main.cpp&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;boost/signals2.hpp&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;mySlot&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
     &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;I&amp;#39;m a slot &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;signals2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mySlot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To build this program we have to install the boost library :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install libboost-signals1.49-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The actual version of boost available on debian wheezy (7.3) is : &lt;code&gt;boost-1.49&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure you add the &lt;code&gt;-dev&lt;/code&gt; suffix to install the boost library headers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This command will download and install the package that contains useful files such as headers (&lt;code&gt;.hpp&lt;/code&gt; files) and the static and dynamic libraries (respectively &lt;code&gt;.a&lt;/code&gt; and &lt;code&gt;.so&lt;/code&gt; files).&lt;/p&gt;
&lt;p&gt;The header files will be installed in &lt;code&gt;/usr/include/boost/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;and the libraries will be in &lt;code&gt;/usr/lib/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now all you have to do is to run your compiler command and tell him that you wish to link with the &lt;code&gt;libboost-signals&lt;/code&gt; library :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gcc main.cpp -o myProgram -lboost-signals
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After translating our program to objects, the final step before the binary become runnable is the linking step, the linker will try to link non user-defined functions with the libraries, so that at run time, our program will find the implementation of theses functions.&lt;/p&gt;
&lt;p&gt;The linker will start to look for the libraries (like &lt;code&gt;libboost-signals&lt;/code&gt;) in the lib directories &lt;code&gt;/usr/lib and /lib&lt;/code&gt; and link your program.&lt;/p&gt;
&lt;p&gt;You can always check with what libraries your program is linked, with the command &lt;code&gt;ldd&lt;/code&gt;, in this case &lt;code&gt;ldd myProgram&lt;/code&gt; will return :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;linux-vdso.so.1 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;  &lt;span class="o"&gt;(&lt;/span&gt;0x00007fffb256f000&lt;span class="o"&gt;)&lt;/span&gt;
libboost_signals.so.1.49.0 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /usr/lib/libboost_signals.so.1.49.0 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f3d3ef7a000&lt;span class="o"&gt;)&lt;/span&gt;
libstdc++.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f3d3ec73000&lt;span class="o"&gt;)&lt;/span&gt;
libgcc_s.so.1 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f3d3ea5c000&lt;span class="o"&gt;)&lt;/span&gt;
libc.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f3d3e6d2000&lt;span class="o"&gt;)&lt;/span&gt;
librt.so.1 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/librt.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f3d3e4ca000&lt;span class="o"&gt;)&lt;/span&gt;
libm.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libm.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f3d3e247000&lt;span class="o"&gt;)&lt;/span&gt;
libpthread.so.0 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f3d3e02b000&lt;span class="o"&gt;)&lt;/span&gt;
/lib64/ld-linux-x86-64.so.2 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f3d3efbf000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can clearly see that our program is linked with &lt;code&gt;libboost_signals.so.1.49.0&lt;/code&gt; wich is located at ̀&lt;code&gt;/usr/lib/libboost_signals.so.1.49.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If it didn't succeed to find in both, it will returns and error &lt;code&gt;undefined reference to ....&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But what if I want to use the latest version which is &lt;code&gt;boost-1.55&lt;/code&gt; ? &lt;/p&gt;
&lt;p&gt;You can specify the first path where the linker should look for the libraries by using the &lt;code&gt;-L&lt;/code&gt; option. &lt;/p&gt;
&lt;p&gt;Let's assume that your new fresh build library is located at &lt;code&gt;/opt/boost_1_55/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The new command will be :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gcc main.cpp -o myProgram -L/opt/boost_1_55/lib/ -lboost_signals
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The linker will look for the library in &lt;code&gt;/opt/boost_1_55/lib&lt;/code&gt; if not it will carry on with the remaining directories mentioned above : and the result of ldd myProgram is now :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vdso&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x00007fffb256f000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;libboost_signals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.1.55.0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;boost_1_55&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libboost_signals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.1.55.0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x00007f0592949000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;libstdc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libstdc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x00007f3d3ec73000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;libgcc_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libgcc_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x00007f3d3ea5c000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;libc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x00007f3d3e6d2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;librt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;librt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x00007f3d3e4ca000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;libm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x00007f3d3e247000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;libpthread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libpthread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x00007f3d3e02b000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ld&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;64.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x00007f3d3efbf000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="gcc"></category><category term="boost"></category><category term="debian"></category><category term="c++"></category><category term="linux"></category></entry></feed>